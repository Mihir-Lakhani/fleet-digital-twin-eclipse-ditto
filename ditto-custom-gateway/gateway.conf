# Custom Eclipse Ditto Gateway Configuration
# Includes Force-Up Bootstrap Configuration

ditto {
  gateway {
    # Force-Up Bootstrap Configuration
    bootstrap {
      # Set to true to force immediate cluster "Up" state
      # This bypasses cluster synchronization and enables HTTP API immediately
      force-up = true
      force-up = ${?DITTO_GATEWAY_BOOTSTRAP_FORCE_UP}
    }
    
    # Standard Gateway HTTP configuration
    http {
      hostname = "0.0.0.0"
      port = 8080
      port = ${?HTTP_PORT}
    }
    
    # Authentication configuration for development
    authentication {
      devops {
        password = "devops"
        password = ${?DEVOPS_PASSWORD}
      }
      status {
        password = "status"  
        password = ${?STATUS_PASSWORD}
      }
    }
  }
  
  # Cluster configuration optimized for single-node with force-up
  cluster {
    # Reduce timeouts for faster startup
    failure-detector {
      acceptable-heartbeat-pause = 5s
      heartbeat-interval = 2s
    }
  }
}

# Pekko HTTP configuration for Gateway
pekko {
  http {
    server {
      # Enable immediate binding
      bind-timeout = 5s
      
      # Request handling timeouts
      request-timeout = 60s
      idle-timeout = 120s
      
      # Connection settings
      max-connections = 1024
    }
    
    client {
      # Client connection settings for internal communication
      connecting-timeout = 10s
      idle-timeout = 60s
    }
  }
  
  # Actor system configuration
  actor {
    provider = "cluster"
    
    # Optimize for single-node deployment
    default-dispatcher {
      fork-join-executor {
        parallelism-min = 4
        parallelism-factor = 2.0
        parallelism-max = 16
      }
    }
  }
  
  # Cluster configuration for force-up mode
  cluster {
    # Seed nodes - empty for bootstrap-based joining
    seed-nodes = []
    
    # Enable self-join for single-node cluster
    self-join = on
    
    # Reduce startup times
    min-nr-of-members = 1
    
    # Auto-downing for development (not recommended for production)
    auto-down-unreachable-after = 10s
    
    # Roles
    roles = ["gateway"]
    
    # Split Brain Resolver configuration for single-node
    downing-provider-class = "org.apache.pekko.cluster.sbr.SplitBrainResolverProvider"
    
    split-brain-resolver {
      # Static quorum strategy for single-node
      active-strategy = static-quorum
      
      static-quorum {
        # Set quorum size to 1 for single-node cluster
        quorum-size = 1
        
        # Keep cluster up when exactly 1 node
        role = ""
      }
      
      # Stable after 3 seconds
      stable-after = 3s
      
      # Down all when unstable after 5 seconds
      down-all-when-unstable = 5s
    }
  }
  
  # Management configuration
  management {
    http {
      hostname = "0.0.0.0"
      port = 8558
      port = ${?MANAGEMENT_PORT}
    }
    
    cluster.bootstrap {
      # Configuration for single-node cluster bootstrap
      contact-point-discovery {
        # Use config-based discovery method for single node
        discovery-method = config
        
        # Service name for discovery
        service-name = "ditto-gateway"
        
        # Port for contact point discovery
        port-name = "management"
        
        # Required contacts for bootstrap (set to 0 for single-node)
        required-contact-point-nr = 0
        
        # Resolve timeout
        resolve-timeout = 3s
        
        # Config-based contact points - self-reference for single-node
        config.contact-points = [
          {
            host = "127.0.0.1"
            port = 8558
          }
        ]
      }
      
      # Contact point probing configuration - reduced for single-node
      contact-point.probing-interval = 2s
      contact-point.probe-timeout = 3s
      
      # Shorter bootstrap timeout for force-up
      timeout = 10s
    }
  }
  
  # Discovery configuration - explicitly set method
  discovery {
    # Use config method for cluster bootstrap
    method = config
    
    # Config method configuration
    config {
      services {
        ditto-gateway {
          endpoints = [
            {
              host = "127.0.0.1" 
              port = 8558
            }
          ]
        }
      }
    }
  }
  
  # Logging configuration
  loggers = ["org.apache.pekko.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  loglevel = ${?LOG_LEVEL}
  logging-filter = "org.apache.pekko.event.slf4j.Slf4jLoggingFilter"
  
  # Log dead letters
  log-dead-letters = 10
  log-dead-letters-during-shutdown = on
}