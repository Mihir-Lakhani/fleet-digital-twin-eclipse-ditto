# Community-Endorsed Eclipse Ditto Configuration
# This configuration completely overrides DNS-based bootstrap logic
# before BootstrapCoordinator initialization

pekko {
  remote {
    artery {
      # Force Gateway to use its container hostname for cluster communication
      canonical {
        hostname = "ditto-gateway"
        port = 2551
      }
      
      # Also bind to all interfaces
      bind {
        hostname = "0.0.0.0"
        port = 2551
      }
    }
  }
  
  management {
    cluster {
      bootstrap {
        # FORCE-UP CONFIGURATION: Enable immediate cluster formation
        self-join = on
        
        # Use config-based discovery with zero contact points required
        contact-point-discovery {
          discovery-method = config
          required-contact-point-nr = 0
        }
        
        # Force bootstrap to complete immediately
        new-cluster-enabled = on
        
        # Reduce timeouts to speed up bootstrap
        contact-point-fallback-port = 0
        form-new-cluster-enabled = on
      }
    }
    
    # HTTP management server configuration
    http {
      hostname = "0.0.0.0"
      port = 8558
    }
  }
  
  cluster {
    # CRITICAL: Use only the Gateway itself as seed node for immediate startup
    seed-nodes = [
      "pekko://ditto-cluster@ditto-gateway:2551"
    ]
    
    # Enable immediate cluster formation
    min-nr-of-members = 1
    
    # Reduce downing timeouts for faster startup
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    
    # Split Brain Resolver configuration for single-node cluster
    split-brain-resolver {
      active-strategy = "static-quorum"
      static-quorum {
        # Only require 1 node (ourselves) to be "up"
        quorum-size = 1
        role = ""
      }
    }
  }
}

# DITTO FORCE-UP CONFIGURATION
ditto {
  gateway {
    # HTTP server configuration - force immediate startup
    http {
      hostname = "0.0.0.0"
      port = 8080
      # Force HTTP binding regardless of cluster state
      enable = true
    }
    
    # Cluster readiness configuration
    cluster {
      # Allow Gateway to start HTTP API immediately without waiting for cluster
      # This is the key setting for "force-up" behavior
      number-of-shards = 1
      
      # Disable strict cluster readiness checks
      majority-check-enabled = false
    }
    
    # Authentication configuration for immediate API access
    authentication {
      # Enable dummy authentication for testing
      dummy {
        dummy = true
      }
    }
    
    # Health check configuration
    health-check {
      # Don't require full cluster health for API availability
      cluster-roles {
        enabled = false
      }
    }
  }
  
  # Service discovery configuration
  service-discovery {
    # Use config-based discovery for immediate bootstrap
    method = "config"
  }
}
      enabled = false
    }
  }
  
  policies {
    # Disable clustering features in policies service
    cluster {
      enabled = false
    }
  }
  
  things {
    # Disable clustering features in things service
    cluster {
      enabled = false
    }
  }
}